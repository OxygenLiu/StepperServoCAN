/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.0.0 Fri Apr 16 01:29:27 2021.
 */

#ifndef MSG_H
#define MSG_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MSG_CONTROL_CMD1_FRAME_ID (0xfau)
#define MSG_LIMITS_CMD2_FRAME_ID (0xfcu)
#define MSG_CONTROL_STATUS1_FRAME_ID (0xfbu)
#define MSG_SYSTEM_STATUS2_FRAME_ID (0xfdu)

/* Frame lengths in bytes. */
#define MSG_CONTROL_CMD1_LENGTH (7u)
#define MSG_LIMITS_CMD2_LENGTH (6u)
#define MSG_CONTROL_STATUS1_LENGTH (8u)
#define MSG_SYSTEM_STATUS2_LENGTH (8u)

/* Extended or standard frame types. */
#define MSG_CONTROL_CMD1_IS_EXTENDED (0)
#define MSG_LIMITS_CMD2_IS_EXTENDED (0)
#define MSG_CONTROL_STATUS1_IS_EXTENDED (0)
#define MSG_SYSTEM_STATUS2_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define MSG_CONTROL_CMD1_TARGET_MODE_OFF_CHOICE (0u)
#define MSG_CONTROL_CMD1_TARGET_MODE_POSITION_RELATIVE_CHOICE (1u)
#define MSG_CONTROL_CMD1_TARGET_MODE_POSITION_ABSOLUTE_CHOICE (2u)
#define MSG_CONTROL_CMD1_TARGET_MODE_ASSIST_CHOICE (4u)

/**
 * Signals in message ControlCmd1.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_control_cmd1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8_cmd1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t target_motor_id_cmd1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t target_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_cmd1;

    /**
     * Relative position degrees at steering wheel to raw motor angle units x 64.
     * Motor 360deg = 65536 units, so:
     * Factor = 64_mutiplier *360deg/65536 / FinalGearRatio / GearboxRatio
     *
     * Range: -28672.00815559343092435368515..28672.00815559343092435368515 (-360..360 deg)
     * Scale: 0.0125558
     * Offset: 0
     */
    int16_t position_change;

    /**
     * Feedforward torque at steering wheel to motor raw current mA x 8.
     * Factor formula:
     * 8_const * 1A/1000mA * MotorRatedTorque / MotorRatedCurrent * GearboxRatio * FinalGearRatio
     *
     * Range: -974.0228116142480056882932198..974.0228116142480056882932198 (-10..10 N*m)
     * Scale: 0.0102667
     * Offset: 0
     */
    int16_t torque_feedforward;

    /**
     * Closeloop torque limit at steering wheel to motor raw current mA x 32.
     * If internally close loop is in the same direction as feedforward, closelooop is simply limited by the value.
     * If internally close loop is in opposite direction to feedforward, then close loop limit is set to |feedforwad| so that closeloop has always power to cancel the feedfrward to avoid uncontrolled rotation away from target position.
     * 
     * Factor formula:
     * 32_const * 1A/1000mA * MotorRatedTorque / MotorRatedCurrent * GearboxRatio * FinalGearRatio
     *
     * Range: 0..974.0228116142480056882932198 (0..10 N*m)
     * Scale: 0.0102667
     * Offset: 0
     */
    uint16_t torque_closeloop_max;
};

/**
 * Signals in message LimitsCmd2.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_limits_cmd2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8_cmd2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_cmd2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t velocity_limit;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t accel_limit;
};

/**
 * Signals in message ControlStatus1.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_control_status1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8_stat1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_stat1;

    /**
     * Position error (desired - actual) in degrees at steering wheel from raw motor angle units x 64.
     * Motor 360deg = 65536 units, so:
     * Factor = 64_mutiplier *360deg/65536 / FinalGearRatio / GearboxRatio
     *
     * Range: -28672.00815559343092435368515..28672.00815559343092435368515 (-360..360 -)
     * Scale: 0.0125558
     * Offset: 0
     */
    int16_t position_error;

    /**
     * Range: -779.2182492913984045506345759..779.2182492913984045506345759 (-8..8 N*m)
     * Scale: 0.0102667
     * Offset: 0
     */
    int16_t torque_actual;

    /**
     * Range: 0..779.2182492913984045506345759 (0..8 N*m)
     * Scale: 0.0102667
     * Offset: 0
     */
    int16_t torque_close_loop_actual;

    /**
     * Filered speed in revolutions per seconds
     * 
     * factor =  1[rev/s]/ FinalGearRatio / GearboxRatio
     *
     * Range: -125.9999496000201599919360032..125.9999496000201599919360032 (-4.5..4.5 rev/s)
     * Scale: 0.0357143
     * Offset: 0
     */
    int8_t speed_actual;
};

/**
 * Signals in message SystemStatus2.
 *
 * All signal values are as on the CAN bus.
 */
struct Msg_system_status2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8_stat2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_stat2;

    /**
     * Range: 0..255 (-60..195 C)
     * Scale: 1
     * Offset: -60
     */
    uint8_t chip_temp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t position_raw;
};

/**
 * Unpack message ControlCmd1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Msg_control_cmd1_unpack(
    struct Msg_control_cmd1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_crc8_cmd1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_target_motor_id_cmd1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_target_mode_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_counter_cmd1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_position_change_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_torque_feedforward_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_cmd1_torque_closeloop_max_is_in_range(uint16_t value);

/**
 * Unpack message LimitsCmd2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int Msg_limits_cmd2_unpack(
    struct Msg_limits_cmd2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_limits_cmd2_crc8_cmd2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_limits_cmd2_counter_cmd2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_limits_cmd2_velocity_limit_is_in_range(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_limits_cmd2_accel_limit_is_in_range(uint16_t value);

/**
 * Pack message ControlStatus1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Msg_control_status1_pack(
    uint8_t *dst_p,
    const struct Msg_control_status1_t *src_p,
    size_t size);


/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_crc8_stat1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_counter_stat1_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_position_error_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_torque_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_torque_close_loop_actual_is_in_range(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_control_status1_speed_actual_is_in_range(int8_t value);

/**
 * Pack message SystemStatus2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int Msg_system_status2_pack(
    uint8_t *dst_p,
    const struct Msg_system_status2_t *src_p,
    size_t size);


/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_system_status2_crc8_stat2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_system_status2_counter_stat2_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_system_status2_chip_temp_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool Msg_system_status2_position_raw_is_in_range(int32_t value);


#ifdef __cplusplus
}
#endif

#endif
